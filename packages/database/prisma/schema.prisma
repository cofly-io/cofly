generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(cuid())
  email     String         @unique
  name      String
  password  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  avatar    String?        @default("user")
  settings  SystemSetting?

  @@map("user")
}

model WorkflowConfig {
  id             String          @id @default(cuid())
  name           String
  version        String?
  isActive       Boolean
  nodesInfo      String?
  relation       String?
  createdTime    DateTime        @default(now())
  updatedTime    DateTime        @updatedAt
  createUser     String?
  isDeleted      Boolean         @default(false)
  deletedAt      DateTime?
  agentWorkflows AgentWorkflow[]

  @@map("workflow_config")
}

model ConnectConfig {
  id           String         @id @default(cuid())
  name         String
  ctype        String
  mtype        String?
  configinfo   String
  createdtime  DateTime       @default(now())
  updatedtime  DateTime       @updatedAt
  creator      String?
  agentRefs    AgentConnect[]
  agents       AiAgent[]
  KbRerankers  AiKb[]         @relation("KbRerankers")
  KbVectors    AiKb[]         @relation("KbVectors")
  KbEmbeddings AiKb[]         @relation("KbEmbeddings")
  KbProcessors AiKb[]         @relation("KbProcessors")

  @@map("connect_config")
}

model AiMcp {
  id        String     @id @default(cuid())
  name      String
  type      String
  mcpinfo   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  mcps      AgentMcp[]

  @@map("ai_mcp")
}

model AiAgent {
  id             String          @id @default(cuid())
  name           String
  description    String
  prompt         String?
  avatar         String?         @default("user")
  modelId        String
  modelName      String?
  connectid      String
  agentinfo      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createUser     String
  agentConnects  AgentConnect[]
  agentMcps      AgentMcp[]
  threads        AgentThread[]
  agentWorkflows AgentWorkflow[]
  connectConfig  ConnectConfig   @relation(fields: [connectid], references: [id])

  @@map("ai_agent")
}

model AiKb {
  id                     String         @id @default(cuid())
  name                   String
  processorConnectId     String?
  processorModelId       String?
  embeddingConnectId     String?
  embeddingModelId       String?
  embeddingDimension     Int?
  vectorConnectId        String?
  rerankerConnectId      String?
  rerankerModelId        String?
  documentCount          Int?
  chunkSize              Int?
  chunkOverlap           Int?
  matchingThreshold      Float?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  rerankConnectConfig    ConnectConfig? @relation("KbRerankers", fields: [rerankerConnectId], references: [id])
  vectorConnectConfig    ConnectConfig? @relation("KbVectors", fields: [vectorConnectId], references: [id])
  embeddingConnectConfig ConnectConfig? @relation("KbEmbeddings", fields: [embeddingConnectId], references: [id])
  processorConnectConfig ConnectConfig? @relation("KbProcessors", fields: [processorConnectId], references: [id])
  documents              KbDocument[]

  @@map("ai_kb")
}

model AgentMcp {
  id        String   @id @default(cuid())
  agentId   String
  mcpId     String
  createdAt DateTime @default(now())
  mcp       AiMcp    @relation(fields: [mcpId], references: [id], onDelete: Cascade)
  agent     AiAgent  @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, mcpId])
  @@map("agent_mcp")
}

model AgentWorkflow {
  id         String         @id @default(cuid())
  agentId    String
  workflowId String
  createdAt  DateTime       @default(now())
  workflow   WorkflowConfig @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  agent      AiAgent        @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, workflowId])
  @@map("agent_workflow")
}

model AgentConnect {
  id        String        @id @default(cuid())
  agentId   String
  connectId String
  createdAt DateTime      @default(now())
  connect   ConnectConfig @relation(fields: [connectId], references: [id], onDelete: Cascade)
  agent     AiAgent       @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, connectId])
  @@map("agent_connect")
}

model Team {
  id        String       @id @unique @default(cuid())
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   TeamMember[]

  @@map("team")
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  agentId   String
  isLeader  Boolean
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, agentId])
  @@map("team_member")
}

model AgentThread {
  id        String         @id @default(uuid())
  agentId   String
  userId    String
  metadata  String         @default("{}")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  messages  AgentMessage[]
  agent     AiAgent        @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_thread")
}

model AgentMessage {
  id          Int         @id @default(autoincrement())
  threadId    String
  messageType String
  agentName   String?
  content     String?
  data        String?
  raw         String?
  checksum    String
  createdAt   DateTime    @default(now())
  thread      AgentThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([threadId, checksum])
  @@map("agent_message")
}

model Plugin {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean
  createdAt   DateTime @default(now())

  @@map("plugin")
}

model SystemSetting {
  id            String   @id @default(cuid())
  userId        String   @unique
  theme         String   @default("dark")
  notifications String   @default("{\"systemUpdates\":true,\"workflowCompletion\":true,\"workflowErrors\":true,\"emailNotifications\":true,\"emailFrequency\":\"immediate\",\"browserNotifications\":true,\"doNotDisturb\":false,\"quietHoursStart\":\"22:00\",\"quietHoursEnd\":\"08:00\",\"soundEnabled\":true,\"soundVolume\":50}")
  apiConfigs    String   @default("{\"cofly\":{\"apiKey\":\"\",\"baseUrl\":\"https://api.cofly.com\"},\"openai\":{\"apiKey\":\"\",\"baseUrl\":\"https://api.openai.com/v1\"},\"custom\":{\"name\":\"\",\"apiKey\":\"\",\"baseUrl\":\"\",\"headers\":\"\"}}")
  mcpSettings   String   @default("{\"enabledTools\":[\"file-system\",\"database\",\"email-sender\",\"text-processor\"],\"toolConfigs\":{}}")
  preferences   String   @default("{\"language\":\"zh-CN\",\"timezone\":\"Asia/Shanghai\",\"dateFormat\":\"YYYY-MM-DD\"}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("system_setting")
}

model SystemModelSetting {
  tabkey     String   @id
  tabDetails String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("system_model_setting")
}

model KbDocument {
  id               String               @id @default(uuid())
  kbId             String
  fileName         String
  originalName     String
  fileType         String
  fileSize         Int
  uploadTime       DateTime
  processedTime    DateTime?
  status           String
  chunkCount       Int
  filePath         String
  textPreview      String?
  mimeType         String?
  checksum         String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @default(now())
  chunks           KbDocumentChunk[]
  Kb               AiKb                 @relation(fields: [kbId], references: [id], onDelete: Cascade)
  processingStatus KbProcessingStatus[]

  @@index([status], map: "idx_kb_documents_status")
  @@index([uploadTime], map: "idx_kb_documents_upload_time")
  @@index([fileType], map: "idx_kb_documents_file_type")
  @@map("kb_documents")
}

model KbDocumentChunk {
  id            String     @id @default(uuid())
  documentId    String
  chunkIndex    Int
  content       String
  contentLength Int
  vectorId      String?
  startPosition Int
  endPosition   Int
  createdAt     DateTime   @default(now())
  document      KbDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, chunkIndex])
  @@index([documentId], map: "idx_kb_chunks_document_id")
  @@index([vectorId], map: "idx_kb_chunks_vector_id")
  @@map("kb_document_chunks")
}

model KbProcessingStatus {
  id           Int        @id @default(autoincrement())
  documentId   String
  status       String
  progress     Int        @default(0)
  currentStep  String?
  errorMessage String?
  errorType    String?
  startTime    BigInt
  endTime      BigInt?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  document     KbDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId], map: "idx_kb_processing_status_document_id")
  @@index([status], map: "idx_kb_processing_status_status")
  @@map("kb_processing_status")
}
