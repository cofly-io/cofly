generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(cuid())
  email     String         @unique
  name      String
  password  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  avatar    String?        @default("user")
  settings  SystemSetting?

  @@map("user")
}

model WorkflowConfig {
  id             String          @id @default(cuid())
  name           String
  version        String?
  isActive       Boolean
  nodesInfo      String?
  relation       String?
  createdTime    DateTime        @default(now())
  updatedTime    DateTime        @updatedAt
  createUser     String?
  isDeleted      Boolean         @default(false)
  deletedAt      DateTime?
  agentWorkflows AgentWorkflow[]

  @@map("workflow_config")
}

model ConnectConfig {
  id          String   @id @default(cuid())
  name        String
  ctype       String
  mtype       String?
  configinfo  String
  createdtime DateTime @default(now())
  updatedtime DateTime @updatedAt
  creator     String?

  // agent 连接 引用
  agentRefs AgentConnect[]

  // agent 关联
  agents AiAgent[]

  // Kb 嵌入模型关联
  KbProcessors AiKb[] @relation("KbProcessors")
  KbEmbeddings AiKb[] @relation("KbEmbeddings")
  KbVectors    AiKb[] @relation("KbVectors")
  KbRerankers  AiKb[] @relation("KbRerankers")

  @@map("connect_config")
}

model AiMcp {
  id        String     @id @default(cuid())
  name      String
  type      String
  mcpinfo   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  mcps      AgentMcp[]

  @@map("ai_mcp")
}

model AiAgent {
  id          String   @id @default(cuid())
  name        String
  description String
  prompt      String?
  avatar      String?  @default("user")
  modelId     String
  modelName   String?
  connectid   String
  agentinfo   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createUser  String

  // 关联关系
  agentConnects  AgentConnect[]
  agentMcps      AgentMcp[]
  threads        AgentThread[]
  agentWorkflows AgentWorkflow[]
  connectConfig  ConnectConfig   @relation(fields: [connectid], references: [id])

  @@map("ai_agent")
}

model AiKb {
  id                 String  @id @default(cuid()) // 知识库id
  name               String // 知识库名称
  processorConnectId String? // 文档处理模型连接Id
  processorModelId   String? // 文档处理模型Id
  embeddingConnectId String? // 嵌入模型连接Id
  embeddingModelId   String? // 嵌入模型Id
  embeddingDimension Int? // 维度大小，留空自动获取
  vectorConnectId    String? // 向量库连接
  rerankerConnectId  String? // 排序模型连接Id
  rerankerModelId    String? // 排序模型Id
  documentCount      Int? // 搜索结果数量
  chunkSize          Int? // chunk大小
  chunkOverlap       Int? // chunk重叠大小
  matchingThreshold  Float? // 匹配度阈值

  createdAt DateTime @default(now()) // 创建事件
  updatedAt DateTime @updatedAt // 更新事件

  // 关联
  processorConnectConfig ConnectConfig? @relation("KbProcessors", fields: [processorConnectId], references: [id])
  embeddingConnectConfig ConnectConfig? @relation("KbEmbeddings", fields: [embeddingConnectId], references: [id])
  vectorConnectConfig    ConnectConfig? @relation("KbVectors", fields: [vectorConnectId], references: [id])
  rerankConnectConfig    ConnectConfig? @relation("KbRerankers", fields: [rerankerConnectId], references: [id])
  documents              KbDocument[]

  @@map("ai_kb")
}

model AgentMcp {
  id        String   @id @default(cuid())
  agentId   String
  mcpId     String
  createdAt DateTime @default(now())
  agent     AiAgent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  mcp       AiMcp    @relation(fields: [mcpId], references: [id], onDelete: Cascade)

  @@unique([agentId, mcpId])
  @@map("agent_mcp")
}

model AgentWorkflow {
  id         String         @id @default(cuid())
  agentId    String
  workflowId String
  createdAt  DateTime       @default(now())
  agent      AiAgent        @relation(fields: [agentId], references: [id], onDelete: Cascade)
  workflow   WorkflowConfig @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([agentId, workflowId])
  @@map("agent_workflow")
}

model AgentConnect {
  id        String        @id @default(cuid())
  agentId   String
  connectId String
  createdAt DateTime      @default(now())
  agent     AiAgent       @relation(fields: [agentId], references: [id], onDelete: Cascade)
  connect   ConnectConfig @relation(fields: [connectId], references: [id], onDelete: Cascade)

  @@unique([agentId, connectId])
  @@map("agent_connect")
}

model Team {
  id        String       @id @unique @default(cuid())
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   TeamMember[]

  @@map("team")
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  agentId   String
  isLeader  Boolean
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, agentId])
  @@map("team_member")
}

model AgentThread {
  id        String         @id @default(uuid())
  agentId   String
  userId    String
  metadata  String         @default("{}")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  messages  AgentMessage[]
  agent     AiAgent        @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_thread")
}

model AgentMessage {
  id          Int         @id @default(autoincrement())
  threadId    String
  messageType String
  agentName   String?
  content     String?
  data        String?
  raw         String?
  checksum    String
  createdAt   DateTime    @default(now())
  thread      AgentThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([threadId, checksum])
  @@map("agent_message")
}

model Plugin {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean
  createdAt   DateTime @default(now())

  @@map("plugin")
}

model SystemSetting {
  id            String   @id @default(cuid())
  userId        String   @unique
  theme         String   @default("dark")
  notifications String   @default("{\"systemUpdates\":true,\"workflowCompletion\":true,\"workflowErrors\":true,\"emailNotifications\":true,\"emailFrequency\":\"immediate\",\"browserNotifications\":true,\"doNotDisturb\":false,\"quietHoursStart\":\"22:00\",\"quietHoursEnd\":\"08:00\",\"soundEnabled\":true,\"soundVolume\":50}")
  apiConfigs    String   @default("{\"cofly\":{\"apiKey\":\"\",\"baseUrl\":\"https://api.cofly.com\"},\"openai\":{\"apiKey\":\"\",\"baseUrl\":\"https://api.openai.com/v1\"},\"custom\":{\"name\":\"\",\"apiKey\":\"\",\"baseUrl\":\"\",\"headers\":\"\"}}")
  mcpSettings   String   @default("{\"enabledTools\":[\"file-system\",\"database\",\"email-sender\",\"text-processor\"],\"toolConfigs\":{}}")
  preferences   String   @default("{\"language\":\"zh-CN\",\"timezone\":\"Asia/Shanghai\",\"dateFormat\":\"YYYY-MM-DD\"}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("system_setting")
}

model SystemModelSetting {
  tabkey     String   @id
  tabDetails String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("system_model_setting")
}

// RAG相关数据模型
model KbDocument {
  id            String    @id @default(uuid())
  kbId          String
  fileName      String
  originalName  String
  fileType      String
  fileSize      Int
  uploadTime    DateTime
  processedTime DateTime?
  status        String
  chunkCount    Int
  filePath      String
  textPreview   String?
  mimeType      String?
  checksum      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  // Relations
  Kb               AiKb                 @relation(fields: [kbId], references: [id], onDelete: Cascade)
  chunks           KbDocumentChunk[]
  processingStatus KbProcessingStatus[]

  // Indexes
  @@index([status], map: "idx_kb_documents_status")
  @@index([uploadTime], map: "idx_kb_documents_upload_time")
  @@index([fileType], map: "idx_kb_documents_file_type")
  @@map("kb_documents")
}

model KbDocumentChunk {
  id            String   @id @default(uuid())
  documentId    String
  chunkIndex    Int
  content       String
  contentLength Int
  vectorId      String?
  startPosition Int
  endPosition   Int
  createdAt     DateTime @default(now())

  // Relations
  document KbDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  // Unique constraint
  @@unique([documentId, chunkIndex])
  // Indexes
  @@index([documentId], map: "idx_kb_chunks_document_id")
  @@index([vectorId], map: "idx_kb_chunks_vector_id")
  @@map("kb_document_chunks")
}

model KbProcessingStatus {
  id           Int      @id @default(autoincrement())
  documentId   String
  status       String
  progress     Int      @default(0)
  currentStep  String?
  errorMessage String?
  errorType    String?
  startTime    BigInt
  endTime      BigInt?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  // Relations
  document KbDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([documentId], map: "idx_kb_processing_status_document_id")
  @@index([status], map: "idx_kb_processing_status_status")
  @@map("kb_processing_status")
}
