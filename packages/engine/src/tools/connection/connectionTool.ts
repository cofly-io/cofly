import { z } from "zod";
import { getConnectRegistry, IDatabaseConnect, IDatabaseExecutionOptions } from "@repo/common";
import { createTool } from "../../agentic";
import { ConnectReference } from "../../AgentInterfaces";

export function getConnectionTools(reference: ConnectReference) {

    function getConnect() : IDatabaseConnect {
        const connectRegistry = getConnectRegistry();
        const connect = connectRegistry.getConnectsByProvider(reference.provider).at(-1) as IDatabaseConnect;
        if(connect && connect.metadata) {
            return connect;
        }

        throw new Error(`Connect ${reference.provider} not found`);
    }

    return [
        createTool({
            name: `db-tool-schema-${reference.name}`,
            description: `Get DB Schema and Tables List - Lists all the tables in database from: \n ${reference.description}`,
            handler: async () => {
                const connect = getConnect();
                if(connect && connect.metadata) {
                    return connect.metadata({
                        type: 'tables',
                        datasourceId: reference.id
                    });
                }

                return null;
            }
        }),
        createTool({
            name: `db-tool-table-definition-${reference.name}`,
            description: `Get Table Definition - Gets the table definition from db using table name from : \n ${reference.description}`,
            parameters: z.object({
                tableName: z.string(),
            }),
            handler: async (input) => {
                const connect = getConnect();
                if(connect && connect.metadata) {
                    return connect.metadata({
                        type: 'columns',
                        datasourceId: reference.id,
                        tableName: input.tableName
                    });
                }

                return null;
            },
        }),
        createTool({
            name: `db-tool-execute-query-${reference.name}`,
            description: `Execute SQL query - Executes any sql query generated by AI`,
            parameters: z.object({
                sql: z.string(),
                prams: z.record(z.string(), z.any()).optional(),
            }),
            handler: async (input) => {
                const connect = getConnect();
                if(connect && connect.execute) {
                    return connect.execute({
                        datasourceId: reference.id,
                        sql: input.sql,
                        prams: input.prams
                    } as IDatabaseExecutionOptions)
                }

                return null;
            },
        })
    ]
}